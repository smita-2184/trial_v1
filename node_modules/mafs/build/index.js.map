{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/view/Mafs.tsx", "../src/context/CoordinateContext.tsx", "../src/context/PaneContext.tsx", "../src/math.ts", "../src/vec.ts", "../src/context/TransformContext.tsx", "../src/context/SpanContext.tsx", "../src/gestures/useCamera.tsx", "../src/gestures/useWheelEnabler.tsx", "../src/context/TestContext.tsx", "../src/display/Coordinates/Axes.tsx", "../src/display/Coordinates/Cartesian.tsx", "../src/display/Coordinates/Polar.tsx", "../src/display/Coordinates/index.tsx", "../src/display/Plot/Simple.tsx", "../src/display/Plot/Parametric.tsx", "../src/display/Plot/PlotUtils.tsx", "../src/display/Theme.ts", "../src/display/Plot/VectorField.tsx", "../src/display/Plot/Inequality.tsx", "../src/display/Plot.tsx", "../src/display/Line/ThroughPoints.tsx", "../src/display/Line/PointAngle.tsx", "../src/display/Line/PointSlope.tsx", "../src/display/Line/Segment.tsx", "../src/display/Line.tsx", "../src/display/Ellipse.tsx", "../src/display/Circle.tsx", "../src/display/PolyBase.tsx", "../src/display/Polygon.tsx", "../src/display/Polyline.tsx", "../src/display/Point.tsx", "../src/display/Vector.tsx", "../src/display/Text.tsx", "../src/interaction/MovablePoint.tsx", "../src/interaction/useMovablePoint.tsx", "../src/animation/useStopwatch.ts", "../src/display/Transform.tsx", "../src/debug/ViewportInfo.tsx", "../src/debug/TransformWidget.tsx", "../src/debug/index.tsx", "../src/display/LaTeX.tsx"],
  "sourcesContent": ["export { Mafs } from \"./view/Mafs\"\nexport type { MafsProps } from \"./view/Mafs\"\n\nexport { Coordinates } from \"./display/Coordinates\"\nexport { autoPi as labelPi } from \"./display/Coordinates/Cartesian\"\n\nexport { Plot } from \"./display/Plot\"\nexport type { OfXProps, OfYProps, ParametricProps, VectorFieldProps } from \"./display/Plot\"\n\nexport { Line } from \"./display/Line\"\nexport type {\n  PointAngleProps,\n  PointSlopeProps,\n  ThroughPointsProps,\n  SegmentProps,\n} from \"./display/Line\"\n\nexport { Circle } from \"./display/Circle\"\nexport type { CircleProps } from \"./display/Circle\"\n\nexport { Ellipse } from \"./display/Ellipse\"\nexport type { EllipseProps } from \"./display/Ellipse\"\n\nexport { Polygon } from \"./display/Polygon\"\nexport type { PolygonProps } from \"./display/Polygon\"\n\nexport { Polyline } from \"./display/Polyline\"\nexport type { PolylineProps } from \"./display/Polyline\"\n\nexport { Point } from \"./display/Point\"\nexport type { PointProps } from \"./display/Point\"\n\nexport { Vector } from \"./display/Vector\"\nexport type { VectorProps } from \"./display/Vector\"\n\nexport { Text } from \"./display/Text\"\nexport type { TextProps, CardinalDirection } from \"./display/Text\"\n\nexport { Theme } from \"./display/Theme\"\nexport type { Filled, Stroked } from \"./display/Theme\"\n\nexport { MovablePoint } from \"./interaction/MovablePoint\"\nexport type { MovablePointProps } from \"./interaction/MovablePoint\"\n\nexport { useMovablePoint } from \"./interaction/useMovablePoint\"\nexport type {\n  ConstraintFunction,\n  UseMovablePoint,\n  UseMovablePointArguments,\n} from \"./interaction/useMovablePoint\"\n\nexport { useStopwatch } from \"./animation/useStopwatch\"\nexport type { Stopwatch, StopwatchArguments } from \"./animation/useStopwatch\"\n\nexport type { Interval } from \"./math\"\nexport { vec } from \"./vec\"\n\nexport { Transform, type TransformProps } from \"./display/Transform\"\n\nexport { useTransformContext } from \"./context/TransformContext\"\nexport { usePaneContext } from \"./context/PaneContext\"\n\nexport { Debug } from \"./debug\"\n\nexport { LaTeX } from \"./display/LaTeX\"\n", "import * as React from \"react\"\nimport CoordinateContext, { CoordinateContextShape } from \"../context/CoordinateContext\"\nimport PaneManager from \"../context/PaneContext\"\nimport useResizeObserver from \"use-resize-observer\"\n\nimport { useGesture } from \"@use-gesture/react\"\nimport { round } from \"../math\"\nimport { vec } from \"../vec\"\nimport { TransformContext } from \"../context/TransformContext\"\nimport { SpanContext } from \"../context/SpanContext\"\nimport invariant from \"tiny-invariant\"\nimport { useCamera } from \"../gestures/useCamera\"\nimport { useWheelEnabler } from \"../gestures/useWheelEnabler\"\nimport { TestContext } from \"../context/TestContext\"\n\nexport type MafsProps = React.PropsWithChildren<{\n  width?: number | \"auto\"\n  height?: number\n\n  /** Whether to enable panning with the mouse and keyboard */\n  pan?: boolean\n\n  /**\n   * Whether to enable zooming with the mouse and keyboard. This can also be an\n   * object with `min` and `max` properties to set the scale limits.\n   *\n   *  * `min` should be in the range (0, 1].\n   *  * `max` should be in the range [1, \u221E).\n   */\n  zoom?: boolean | { min: number; max: number }\n\n  /**\n   * A way to declare the \"area of interest\" of your visualizations. Mafs will center and zoom to\n   * this area.\n   */\n  viewBox?: { x?: vec.Vector2; y?: vec.Vector2; padding?: number }\n  /**\n   * Whether to squish the graph to fill the Mafs viewport or to preserve the aspect ratio of the\n   * coordinate space.\n   */\n  preserveAspectRatio?: \"contain\" | false\n\n  /** Called when the view is clicked on, and passed the point where it was clicked. */\n  onClick?: (point: vec.Vector2, event: MouseEvent) => void\n\n  /**\n   * @deprecated this was previously used to avoid rendering Mafs on the server\n   * side. However, Mafs now avoids rendering at all until it is mounted, so\n   * this prop is now ignored.\n   */\n  ssr?: boolean\n}>\n\nexport function Mafs({\n  width: propWidth = \"auto\",\n  height: propHeight = 500,\n  pan = true,\n  zoom = false,\n  viewBox = { x: [-3, 3], y: [-3, 3] },\n  preserveAspectRatio = \"contain\",\n  children,\n  ssr = false,\n  onClick = undefined,\n}: MafsProps) {\n  const testContext = React.useContext(TestContext)\n  const height = testContext.overrideHeight ?? propHeight\n\n  const desiredCssWidth = propWidth === \"auto\" ? \"100%\" : `${propWidth}px`\n\n  const rootRef = React.useRef<HTMLDivElement>(null)\n  const { width = propWidth === \"auto\" ? (ssr ? 500 : 0) : propWidth } =\n    useResizeObserver<HTMLDivElement>({\n      ref: propWidth === \"auto\" ? rootRef : null,\n    })\n\n  return (\n    <div\n      className=\"MafsView\"\n      style={{ width: desiredCssWidth, height }}\n      tabIndex={pan || zoom ? 0 : -1}\n      ref={rootRef}\n    >\n      {width > 0 && (\n        <MafsCanvas\n          width={width}\n          height={height}\n          desiredCssWidth={desiredCssWidth}\n          rootRef={rootRef}\n          pan={pan}\n          zoom={zoom}\n          viewBox={viewBox}\n          preserveAspectRatio={preserveAspectRatio}\n          ssr={ssr}\n          onClick={onClick}\n        >\n          {children}\n        </MafsCanvas>\n      )}\n    </div>\n  )\n}\n\ntype MafsCanvasProps = {\n  width: number\n  height: number\n  desiredCssWidth: string\n  rootRef: React.RefObject<HTMLDivElement>\n} & Required<Pick<MafsProps, \"pan\" | \"zoom\" | \"viewBox\" | \"preserveAspectRatio\" | \"ssr\">> &\n  Pick<MafsProps, \"children\" | \"onClick\">\n\nfunction MafsCanvas({\n  width,\n  height,\n  desiredCssWidth,\n  rootRef,\n  pan,\n  zoom,\n  viewBox,\n  preserveAspectRatio,\n  children,\n  onClick,\n}: MafsCanvasProps) {\n  let minZoom = 1\n  let maxZoom = 1\n  if (typeof zoom === \"object\") {\n    invariant(zoom.min > 0 && zoom.min <= 1, \"zoom.min must be in the range (0, 1]\")\n    invariant(zoom.max >= 1, \"zoom.max must be in the range [1, \u221E)\")\n    minZoom = zoom.min\n    maxZoom = zoom.max\n  } else if (zoom) {\n    minZoom = 0.5\n    maxZoom = 5\n  }\n\n  const camera = useCamera({ minZoom, maxZoom })\n\n  const padding = viewBox?.padding ?? 0.5\n  // Default behavior for `preserveAspectRatio == false`\n  let xMin = (viewBox?.x?.[0] ?? 0) - padding\n  let xMax = (viewBox?.x?.[1] ?? 0) + padding\n  let yMin = (viewBox?.y?.[0] ?? 0) - padding\n  let yMax = (viewBox?.y?.[1] ?? 0) + padding\n\n  if (preserveAspectRatio === \"contain\") {\n    const aspect = width / height\n    const aoiAspect = (xMax - xMin) / (yMax - yMin)\n\n    if (aoiAspect > aspect) {\n      const yCenter = (yMax + yMin) / 2\n      const ySpan = (xMax - xMin) / aspect / 2\n      yMin = yCenter - ySpan\n      yMax = yCenter + ySpan\n    } else {\n      const xCenter = (xMax + xMin) / 2\n      const xSpan = ((yMax - yMin) * aspect) / 2\n      xMin = xCenter - xSpan\n      xMax = xCenter + xSpan\n    }\n  }\n\n  ;[xMin, yMin] = vec.transform([xMin, yMin], camera.matrix)\n  ;[xMax, yMax] = vec.transform([xMax, yMax], camera.matrix)\n\n  const xSpan = xMax - xMin\n  const ySpan = yMax - yMin\n\n  const viewTransform = React.useMemo(() => {\n    const scaleX = round((1 / xSpan) * width, 5)\n    const scaleY = round((-1 / ySpan) * height, 5)\n    return vec.matrixBuilder().scale(scaleX, scaleY).get()\n  }, [height, width, xSpan, ySpan])\n\n  const viewBoxX = round((xMin / (xMax - xMin)) * width, 10)\n  const viewBoxY = round((yMax / (yMin - yMax)) * height, 10)\n\n  const inverseViewTransform = vec.matrixInvert(viewTransform)\n\n  const pickupOrigin = React.useRef<vec.Vector2>([0, 0])\n  const pickupPoint = React.useRef<vec.Vector2>([0, 0])\n\n  function mapGesturePoint(point: vec.Vector2): vec.Vector2 {\n    const el = rootRef.current\n    invariant(el, \"SVG is not mounted\")\n    invariant(inverseViewTransform, \"View transform is not invertible\")\n\n    const rect = el.getBoundingClientRect()\n    return vec.transform(\n      [point[0] - rect.left + viewBoxX, point[1] - rect.top + viewBoxY],\n      inverseViewTransform\n    )\n  }\n\n  const wheelEnabler = useWheelEnabler(!!zoom)\n\n  const justDragged = React.useRef(false)\n\n  useGesture(\n    {\n      onDrag: ({ movement, first, event, type, pinching, memo = [0, 0], last }) => {\n        if (pinching) return movement\n\n        if (first) camera.setBase()\n        const [mx, my] = vec.sub(movement, memo)\n\n        camera.move({ pan: [(-mx / width) * xSpan, (my / height) * ySpan] })\n\n        const keyboard = type.includes(\"key\")\n        if (keyboard) event?.preventDefault()\n\n        // Some minor jank so that onClick doesn't fire on drag.\n        if (last) {\n          justDragged.current = true\n          setTimeout(() => (justDragged.current = false), 10)\n        }\n        return !keyboard && first ? movement : memo\n      },\n      onPinch: ({ first, movement: [scale], origin, event, last }) => {\n        if (!event.currentTarget || !inverseViewTransform) return\n\n        if (first) {\n          camera.setBase()\n          pickupOrigin.current = origin\n          pickupPoint.current = pan\n            ? mapGesturePoint(origin)\n            : [(xMin + xMax) / 2, (yMin + yMax) / 2]\n        }\n\n        let offset: vec.Vector2 = [0, 0]\n        if (pan) {\n          offset = vec.transform(vec.sub(origin, pickupOrigin.current), inverseViewTransform)\n        }\n        camera.move({ zoom: { at: pickupPoint.current, scale }, pan: vec.scale(offset, -1) })\n\n        // Commit the camera just in case we are transitioning into a drag\n        // gesture (such as by lifting just one finger after pinching).\n        if (last) camera.setBase()\n      },\n      onWheel: ({ pinching, event, delta: [, scroll] }) => {\n        if (pinching) return\n\n        // Simple sigmoid function to flatten extreme scrolling\n        const scale = 2 / (1 + Math.exp(-scroll / 300))\n\n        const point = mapGesturePoint([event.clientX, event.clientY])\n        camera.setBase()\n        camera.move({ zoom: { at: point, scale: 1 / scale } })\n      },\n      onKeyDown: ({ event }) => {\n        // Avoid messing with browser zoom\n        if (event.metaKey) return\n\n        const base = { Equal: 1, Minus: -1 }[event.code] ?? 0\n        if (!base) return\n\n        let multiplier = 0.1\n        if (event.altKey || event.metaKey) multiplier = 0.01\n        if (event.shiftKey) multiplier = 0.3\n\n        const scale = 1 + base * multiplier\n        const center: vec.Vector2 = [(xMax + xMin) / 2, (yMax + yMin) / 2]\n\n        camera.setBase()\n        camera.move({ zoom: { at: center, scale } })\n      },\n      onMouseMove: () => {\n        wheelEnabler.handleMouseMove()\n      },\n      onClick: ({ event }) => {\n        if (!onClick || !rootRef.current || justDragged.current) return\n\n        const box = rootRef.current.getBoundingClientRect()\n        const pxX = event.clientX - box.left\n        const pxY = box.bottom - event.clientY\n        const x = (pxX / width) * xSpan + xMin\n        const y = (pxY / height) * ySpan + yMin\n\n        onClick([x, y], event)\n      },\n    },\n    {\n      drag: { enabled: pan, eventOptions: { passive: false }, threshold: 1 },\n      pinch: { enabled: !!zoom, eventOptions: { passive: false } },\n      wheel: {\n        enabled: wheelEnabler.wheelEnabled,\n        preventDefault: true,\n        eventOptions: { passive: false },\n      },\n      target: rootRef,\n    }\n  )\n\n  const viewTransformCSS = vec.toCSS(viewTransform)\n\n  const coordinateContext = React.useMemo<CoordinateContextShape>(\n    () => ({ xMin, xMax, yMin, yMax, height, width }),\n    [xMin, xMax, yMin, yMax, height, width]\n  )\n\n  return (\n    <CoordinateContext.Provider value={coordinateContext}>\n      <SpanContext.Provider value={{ xSpan, ySpan }}>\n        <TransformContext.Provider\n          value={{ userTransform: vec.identity, viewTransform: viewTransform }}\n        >\n          <PaneManager>\n            <svg\n              width={width}\n              height={height}\n              viewBox={`${viewBoxX} ${viewBoxY} ${width} ${height}`}\n              preserveAspectRatio=\"xMidYMin\"\n              style={{\n                width: desiredCssWidth,\n                touchAction: pan ? \"none\" : \"auto\",\n                ...({\n                  \"--mafs-view-transform\": viewTransformCSS,\n                  \"--mafs-user-transform\": \"translate(0, 0)\",\n                } as React.CSSProperties),\n              }}\n            >\n              {children}\n            </svg>\n          </PaneManager>\n        </TransformContext.Provider>\n      </SpanContext.Provider>\n    </CoordinateContext.Provider>\n  )\n}\n\nMafs.displayName = \"Mafs\"\n", "import * as React from \"react\"\nimport invariant from \"tiny-invariant\"\n\nexport interface CoordinateContextShape {\n  xMin: number\n  xMax: number\n  yMin: number\n  yMax: number\n  width: number\n  height: number\n}\n\nconst CoordinateContext = React.createContext<CoordinateContextShape | null>(null)\nCoordinateContext.displayName = \"CoordinateContext\"\n\nexport function useCoordinateContext(): CoordinateContextShape {\n  const context = React.useContext(CoordinateContext)\n  invariant(\n    context,\n    \"CoordinateContext is not loaded. Are you rendering a Mafs component outside of Mafs?\"\n  )\n\n  return context\n}\n\nexport default CoordinateContext\n", "import * as React from \"react\"\nimport { useCoordinateContext } from \"./CoordinateContext\"\nimport { range, Interval } from \"../math\"\nconst { round, ceil, floor, log2 } = Math\n\ninterface PaneContextShape {\n  xPanes: Interval[]\n  yPanes: Interval[]\n  xPaneRange: Interval\n  yPaneRange: Interval\n}\n\nconst PaneContext = React.createContext<PaneContextShape>({\n  xPanes: [],\n  yPanes: [],\n  xPaneRange: [0, 0],\n  yPaneRange: [0, 0],\n})\nPaneContext.displayName = \"PaneContext\"\n\nexport function usePaneContext(): PaneContextShape {\n  return React.useContext(PaneContext)\n}\n\nfunction PaneManager({ children }: { children: React.ReactNode }) {\n  const { xMin, xMax, yMin, yMax } = useCoordinateContext()\n\n  const xPaneSize = 2 ** round(log2(xMax - xMin) - 1)\n  const yPaneSize = 2 ** round(log2(yMax - yMin) - 1)\n\n  // When there's only `pad` remaining of the current pane, we round up to\n  // load the next pane. For example, if each pane is 2 units wide, the next\n  // step of panes will be loaded at x = 1.75, 3.75, 5.75, etc when pad = 1/8.\n  const pad = 1 / 8\n  const xLowerBound = xPaneSize * floor(xMin / xPaneSize - pad)\n  const xUpperBound = xPaneSize * ceil(xMax / xPaneSize + pad)\n  const yLowerBound = yPaneSize * floor(yMin / yPaneSize - pad)\n  const yUpperBound = yPaneSize * ceil(yMax / yPaneSize + pad)\n\n  const xPanes = React.useMemo(\n    () =>\n      range(xLowerBound, xUpperBound - xPaneSize, xPaneSize).map(\n        (xMin) => [xMin, xMin + xPaneSize] as Interval\n      ),\n    [xLowerBound, xUpperBound, xPaneSize]\n  )\n\n  const yPanes = React.useMemo(\n    () =>\n      range(yLowerBound, yUpperBound - yPaneSize, yPaneSize).map(\n        (yMin) => [yMin, yMin + yPaneSize] as Interval\n      ),\n    [yLowerBound, yUpperBound, yPaneSize]\n  )\n\n  const context = React.useMemo(\n    () => ({\n      xPanes,\n      yPanes,\n      xPaneRange: [xLowerBound, xUpperBound] as Interval,\n      yPaneRange: [yLowerBound, yUpperBound] as Interval,\n    }),\n    [xPanes, yPanes, xLowerBound, xUpperBound, yLowerBound, yUpperBound]\n  )\n\n  return <PaneContext.Provider value={context}>{children}</PaneContext.Provider>\n}\n\nPaneManager.displayName = \"PaneManager\"\n\nexport default PaneManager\n", "export type Interval = [min: number, max: number]\n\nexport function round(value: number, precision = 0): number {\n  const multiplier = Math.pow(10, precision || 0)\n  return Math.round(value * multiplier) / multiplier\n}\n\nexport function range(min: number, max: number, step = 1): number[] {\n  const result = []\n  for (let i = min; i < max - step / 2; i += step) {\n    result.push(i)\n  }\n\n  const computedMax = result[result.length - 1] + step\n  if (Math.abs(max - computedMax) < step / 1e-6) {\n    result.push(max)\n  } else {\n    result.push(computedMax)\n  }\n\n  return result\n}\n\nexport function clamp(number: number, min: number, max: number): number {\n  return Math.min(Math.max(number, min), max)\n}\n", "// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace vec {\n  /**\n   * @fileinfo\n   *\n   * Mafs' internal linear algebra functions.\n   *\n   * A lot of the code here was adapted from [vec-la](https://github.com/francisrstokes/vec-la) 1.4.0,\n   * which was released under the MIT license.\n   */\n\n  /**\n   * A two-dimensional vector\n   */\n  export type Vector2 = [x: number, y: number]\n\n  /**\n   * A 2x3 representation of a 3x3 matrix used to transform and translate a\n   * two-dimensional vector.\n   */\n  export type Matrix = [number, number, number, number, number, number]\n\n  /**\n   * Add two vectors\n   */\n  export function add(v: Vector2, v2: Vector2): Vector2 {\n    return [v[0] + v2[0], v[1] + v2[1]]\n  }\n\n  /**\n   * Subtract one vector from another\n   */\n  export function sub(v: Vector2, v2: Vector2): Vector2 {\n    return [v[0] - v2[0], v[1] - v2[1]]\n  }\n\n  /**\n   * Get the magnitude of a vector\n   */\n  export function mag(v: Vector2): number {\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1])\n  }\n\n  /**\n   * Get the normal vector of a vector\n   */\n  export function normal(v: Vector2): Vector2 {\n    return [-v[1], v[0]]\n  }\n\n  /**\n   * Linear interpolation between two vectors\n   */\n  export function lerp(v1: Vector2, v2: Vector2, t: number): Vector2 {\n    const d = sub(v2, v1)\n    const m = mag(d)\n    return add(v1, withMag(d, t * m))\n  }\n\n  export function withMag(v: Vector2, m: number): Vector2 {\n    const magnitude = mag(v)\n    return scale(v, m / magnitude)\n  }\n  /**\n   * Return a normalized version of a vector\n   */\n  export function normalize(v: Vector2): Vector2 {\n    return withMag(v, 1)\n  }\n\n  /**\n   * Scale a vector by a scalar\n   */\n  export function scale(v: Vector2, sc: number): Vector2 {\n    return [v[0] * sc, v[1] * sc]\n  }\n\n  /**\n   * Apply a matrix transformation to a vector\n   */\n  export function transform(v: Vector2, m: Matrix): Vector2 {\n    return [v[0] * m[0] + v[1] * m[1] + m[2], v[0] * m[3] + v[1] * m[4] + m[5]]\n  }\n\n  /**\n   * Multiply two matrices (compose 2D transformations)\n   */\n  export function matrixMult(m: Matrix, m2: Matrix): Matrix {\n    return matrixCreate(\n      m[0] * m2[0] + m[1] * m2[3],\n      m[3] * m2[0] + m[4] * m2[3],\n      m[0] * m2[1] + m[1] * m2[4],\n      m[3] * m2[1] + m[4] * m2[4],\n      m[0] * m2[2] + m[1] * m2[5] + m[2],\n      m[3] * m2[2] + m[4] * m2[5] + m[5]\n    )\n  }\n\n  /**\n   * Rotates a vector around the origin. Shorthand for a rotation matrix\n   */\n  export function rotate(v: Vector2, a: number): Vector2 {\n    const c = Math.cos(a)\n    const s = Math.sin(a)\n    return [v[0] * c - v[1] * s, v[0] * s + v[1] * c]\n  }\n\n  /**\n   * Rotates a vector around a given point.\n   */\n  export function rotateAbout(v: Vector2, cp: Vector2, a: number): Vector2 {\n    const v2 = sub(v, cp)\n    return add(cp, rotate(v2, a))\n  }\n\n  /**\n   * Gets the midpoint of two vectors\n   */\n  export function midpoint(v: Vector2, v2: Vector2): Vector2 {\n    return lerp(v, v2, 0.5)\n  }\n\n  /**\n   * Gets the distance between two vectors\n   */\n  export function dist(v: Vector2, v2: Vector2): number {\n    return Math.sqrt(squareDist(v, v2))\n  }\n\n  /**\n   * Get the square distance between two vectors\n   */\n  export function squareDist(v: Vector2, v2: Vector2): number {\n    return Math.pow(v2[0] - v[0], 2) + Math.pow(v2[1] - v[1], 2)\n  }\n\n  /**\n   * Dot product of two vectors\n   */\n  export function dot(v: Vector2, v2: Vector2): number {\n    return v[0] * v2[0] + v[1] * v2[1]\n  }\n\n  /**\n   * Determinant of a matrix\n   */\n  export function det(m: Matrix): number {\n    return m[0] * m[4] - m[3] * m[1]\n  }\n\n  /**\n   * Inverts a 3x3 matrix, returning null if the determinant is zero\n   * (indicating a degenerate transformation)\n   */\n  export function matrixInvert(a: Matrix): Matrix | null {\n    // Calculate the determinant\n    const mDet = det(a)\n    if (!mDet) return null\n\n    const invDet = 1.0 / mDet\n\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2]\n    const a10 = a[3],\n      a11 = a[4],\n      a12 = a[5]\n\n    return matrixCreate(\n      invDet * a11,\n      invDet * -a10,\n      invDet * -a01,\n      invDet * a00,\n      invDet * (a12 * a01 - a02 * a11),\n      invDet * (-a12 * a00 + a02 * a10)\n    )\n  }\n\n  /**\n   * Returns a builder object for easily creating a matrix from several transformations.\n   *\n   * ```ts\n   * const matrix =\n   *   vec.matrixBuilder().translate(10, 10).scale(2).get()\n   * ```\n   *\n   * An existing matrix can also be passed in to start with.\n   */\n  export function matrixBuilder(m: Matrix | null = null) {\n    const _m = m || matrixCreate()\n\n    return {\n      mult: (m: Matrix) => matrixBuilder(matrixMult(m, _m)),\n      translate: (x: number, y: number) =>\n        matrixBuilder(matrixMult(matrixCreate(1, 0, 0, 1, x, y), _m)),\n      rotate: (a: number) => {\n        const c = Math.cos(a)\n        const s = Math.sin(a)\n        return matrixBuilder(matrixMult(matrixCreate(c, s, -s, c), _m))\n      },\n      scale: (x: number, y: number) => matrixBuilder(matrixMult(matrixCreate(x, 0, 0, y), _m)),\n      shear: (x: number, y: number) => matrixBuilder(matrixMult(matrixCreate(1, y, x, 1), _m)),\n      get: (): Matrix => [..._m],\n    }\n  }\n\n  /**\n   * Represent a matrix as a CSS transform `matrix(...)` string\n   */\n  export function toCSS(matrix: Matrix) {\n    const [a, c, tx, b, d, ty] = matrix\n    return `matrix(${a}, ${b}, ${c}, ${d}, ${tx}, ${ty})`\n  }\n\n  export const identity = matrixBuilder().get()\n}\n\n/**\n * Create a matrix\n */\nfunction matrixCreate(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0): vec.Matrix {\n  return [a, c, tx, b, d, ty]\n}\n", "import * as React from \"react\"\nimport invariant from \"tiny-invariant\"\nimport { vec } from \"../vec\"\n\ninterface TransformContextShape {\n  /**\n   * The resulting transformation matrix from any user-provided transforms (via\n   * the `<Transform />` component).\n   */\n  userTransform: vec.Matrix\n\n  /**\n   * A transformation that maps \"math\" space to pixel space. Note that, in many\n   * cases, you don't need to use this transformation directly. Instead, use the\n   * `var(--mafs-view-transform)` CSS custom property in combination with the\n   * SVG `transform` prop.\n   */\n  viewTransform: vec.Matrix\n}\n\nexport const TransformContext = React.createContext<TransformContextShape | null>(null)\nTransformContext.displayName = \"TransformContext\"\n\n/**\n * A hook that returns the current transformation context. This is useful for\n * building custom Mafs components that need to be aware of how to map between\n * world space and pixel space, and also need to respond to user-provided\n * transformations.\n */\nexport function useTransformContext() {\n  const context = React.useContext(TransformContext)\n\n  invariant(\n    context,\n    \"TransformContext is not loaded. Are you rendering a Mafs component outside of a MafsView?\"\n  )\n\n  return context\n}\n", "import * as React from \"react\"\nimport invariant from \"tiny-invariant\"\n\ninterface SpanContextShape {\n  xSpan: number\n  ySpan: number\n}\n\nexport const SpanContext = React.createContext<SpanContextShape | null>({\n  xSpan: 0,\n  ySpan: 0,\n})\n\nSpanContext.displayName = \"SpanContext\"\n\nexport function useSpanContext(): SpanContextShape {\n  const context = React.useContext(SpanContext)\n  invariant(context, \"SpanContext is not defined\")\n  return context\n}\n", "import * as React from \"react\"\nimport { clamp } from \"../math\"\nimport { vec } from \"../vec\"\n\nexport function useCamera({ minZoom, maxZoom }: { minZoom: number; maxZoom: number }) {\n  const [matrix, setMatrix] = React.useState<vec.Matrix>(vec.identity)\n  const initialMatrix = React.useRef<vec.Matrix>(vec.identity)\n\n  return {\n    matrix: matrix,\n    setBase() {\n      initialMatrix.current = matrix\n    },\n    move({ zoom, pan }: { zoom?: { at: vec.Vector2; scale?: number }; pan?: vec.Vector2 }) {\n      const scale = 1 / (zoom?.scale ?? 1)\n      const zoomAt = zoom?.at ?? [0, 0]\n\n      const currentScale = initialMatrix.current[0]\n      const minScale = 1 / maxZoom / currentScale\n      const maxScale = 1 / minZoom / currentScale\n\n      /**\n       * Represents the amount of scaling to apply such that we never exceed the\n       * minimum or maximum zoom level.\n       */\n      const clampedScale = clamp(scale, minScale, maxScale)\n\n      const newCamera = vec\n        .matrixBuilder(initialMatrix.current)\n        .translate(...vec.scale(zoomAt, -1))\n        .scale(clampedScale, clampedScale)\n        .translate(...vec.scale(zoomAt, 1))\n        .translate(...(pan ?? [0, 0]))\n        .get()\n\n      setMatrix(newCamera)\n    },\n  }\n}\n", "import * as React from \"react\"\n\n/**\n * A custom hook that makes the `wheel` event not interrupt scrolling. It will\n * only allow the Mafs viewport to be zoomed using the wheel if the user hasn't\n * scrolled the page for 500ms, or if they are hovering over the Mafs viewport.\n */\nexport function useWheelEnabler(zoomEnabled: boolean) {\n  const [wheelEnabled, setWheelEnabled] = React.useState(false)\n\n  const timer = React.useRef<number>(0)\n\n  React.useEffect(() => {\n    if (!zoomEnabled) return\n\n    function handleWindowScroll() {\n      setWheelEnabled(false)\n\n      clearTimeout(timer.current)\n      timer.current = setTimeout(() => {\n        setWheelEnabled(true)\n      }, 500) as unknown as number\n    }\n\n    window.addEventListener(\"scroll\", handleWindowScroll)\n    return () => window.removeEventListener(\"scroll\", handleWindowScroll)\n  }, [zoomEnabled])\n\n  return {\n    wheelEnabled: zoomEnabled ? wheelEnabled : false,\n    handleMouseMove() {\n      setWheelEnabled(true)\n    },\n  }\n}\n", "import * as React from \"react\"\n\ninterface TestContextShape {\n  overrideHeight?: number\n}\n\nexport const TestContext = React.createContext<TestContextShape>({\n  overrideHeight: undefined,\n})\n\nexport const TestContextProvider = TestContext.Provider\n", "import { usePaneContext } from \"../../context/PaneContext\"\nimport { useTransformContext } from \"../../context/TransformContext\"\nimport { vec } from \"../../vec\"\nimport { snappedRange } from \"./Cartesian\"\n\nexport type LabelMaker = (value: number) => React.ReactNode\n\nexport interface LabelsProps {\n  separation: number\n  labelMaker: LabelMaker\n}\n\nexport type AxisOptions = {\n  axis: boolean\n  lines: number | false\n  labels?: false | LabelMaker\n}\n\nexport const defaultLabelMaker: LabelMaker = (x) => (\n  <>\n    {x}\n    {x < 0 && <tspan visibility=\"hidden\">-</tspan>}\n  </>\n)\n\nexport const defaultAxisOptions: Partial<AxisOptions> = {\n  axis: true,\n  lines: 1,\n  labels: defaultLabelMaker,\n}\n\nexport function XLabels({ separation, labelMaker }: LabelsProps) {\n  const { viewTransform } = useTransformContext()\n  const { xPanes } = usePaneContext()\n\n  return (\n    <g className=\"mafs-axis\">\n      {xPanes.map(([min, max]) => (\n        <g key={`${min},${max}`}>\n          {snappedRange(min, max, separation)\n            .filter((x) => Math.abs(x) > separation / 1e6)\n            .map((x) => (\n              <text\n                x={vec.transform([x, 0], viewTransform)[0]}\n                y={5}\n                key={x}\n                dominantBaseline=\"hanging\"\n                textAnchor=\"middle\"\n                style={{ fill: \"var(--mafs-origin-color)\", paintOrder: \"stroke\" }}\n              >\n                {labelMaker(x)}\n              </text>\n            ))}\n        </g>\n      ))}\n    </g>\n  )\n}\nXLabels.displayName = \"CartesianCoordinates.XLabels\"\n\nexport function YLabels({ separation, labelMaker }: LabelsProps) {\n  const { viewTransform } = useTransformContext()\n  const { yPanes } = usePaneContext()\n\n  return (\n    <g className=\"mafs-axis\">\n      {yPanes.map(([min, max]) => (\n        <g key={`${min},${max}`}>\n          {snappedRange(min, max, separation)\n            .filter((y) => Math.abs(y) > separation / 1e6)\n            .map((y) => (\n              <text\n                x={5}\n                y={vec.transform([0, y], viewTransform)[1]}\n                key={y}\n                dominantBaseline=\"central\"\n                style={{ fill: \"var(--mafs-origin-color)\", paintOrder: \"stroke\" }}\n              >\n                {labelMaker(y)}\n              </text>\n            ))}\n        </g>\n      ))}\n    </g>\n  )\n}\nYLabels.displayName = \"CartesianCoordinates.YLabels\"\n", "import { range, round } from \"../../math\"\nimport { usePaneContext } from \"../../context/PaneContext\"\nimport { useTransformContext } from \"../../context/TransformContext\"\nimport { vec } from \"../../vec\"\nimport { XLabels, YLabels, AxisOptions, defaultAxisOptions } from \"./Axes\"\n\n// This is sort of a hack\u2014every SVG pattern on a page needs a unique ID, otherwise they conflict.\nlet incrementer = 0\n\ntype GridAxisOptions = Partial<AxisOptions & { subdivisions: number | false }>\n\nexport interface CartesianCoordinatesProps {\n  xAxis?: GridAxisOptions | false\n  yAxis?: GridAxisOptions | false\n  subdivisions?: number | false\n}\n\nexport function Cartesian({\n  xAxis: xAxisOverrides,\n  yAxis: yAxisOverrides,\n  subdivisions = false,\n}: CartesianCoordinatesProps) {\n  const xAxisEnabled = xAxisOverrides !== false\n  const yAxisEnabled = yAxisOverrides !== false\n\n  const xAxis = { subdivisions, ...defaultAxisOptions, ...xAxisOverrides } as GridAxisOptions\n  const yAxis = { subdivisions, ...defaultAxisOptions, ...yAxisOverrides } as GridAxisOptions\n\n  const id = `cartesian-${incrementer++}`\n\n  const { viewTransform } = useTransformContext()\n  const { xPaneRange, yPaneRange } = usePaneContext()\n\n  const [xMin, xMax] = xPaneRange\n  const [yMin, yMax] = yPaneRange\n\n  const [vxMin, vyMin] = vec.transform([xMin, yMin], viewTransform)\n  const [vxMax, vyMax] = vec.transform([xMax, yMax], viewTransform)\n\n  const xLines = xAxis.lines || 1\n  const yLines = yAxis.lines || 1\n\n  const [unitW, unitH] = vec.transform([xLines, -yLines], viewTransform)\n\n  const xSubs = xAxis.subdivisions || 1\n  const ySubs = yAxis.subdivisions || 1\n\n  const subUnitW = unitW / xSubs\n  const subUnitH = unitH / ySubs\n\n  return (\n    <g fill=\"none\">\n      <pattern x={0} y={0} width={unitW} height={unitH} id={id} patternUnits=\"userSpaceOnUse\">\n        <pattern\n          width={subUnitW}\n          height={subUnitH}\n          id={`${id}-subdivision`}\n          patternUnits=\"userSpaceOnUse\"\n        >\n          <g stroke=\"var(--grid-line-subdivision-color)\">\n            {xAxisEnabled !== false && xSubs > 1 && (\n              <>\n                <line x1={0} y1={0} x2={0} y2={subUnitH} />\n                <line x1={subUnitW} y1={0} x2={subUnitW} y2={subUnitH} />\n              </>\n            )}\n            {yAxisEnabled !== false && ySubs > 1 && (\n              <>\n                <line x1={0} y1={0} x2={subUnitW} y2={0} />\n                <line x1={0} y1={subUnitH} x2={subUnitW} y2={subUnitH} />\n              </>\n            )}\n          </g>\n        </pattern>\n\n        <rect width={unitW} height={unitH} fill={`url(#${id}-subdivision)`} />\n\n        <g stroke=\"var(--mafs-line-color)\">\n          {yAxisEnabled && xAxis.lines && (\n            <>\n              <line x1={0} y1={0} x2={unitW} y2={0} />\n              <line x1={0} y1={unitH} x2={unitW} y2={unitH} />\n            </>\n          )}\n          {xAxisEnabled && yAxis.lines && (\n            <>\n              <line x1={0} y1={0} x2={0} y2={unitH} />\n              <line x1={unitW} y1={0} x2={unitW} y2={unitH} />\n            </>\n          )}\n        </g>\n      </pattern>\n\n      <rect x={vxMin} y={vyMax} width={vxMax - vxMin} height={vyMin - vyMax} fill={`url(#${id})`} />\n\n      <g stroke=\"var(--mafs-origin-color)\">\n        {xAxisEnabled && xAxis.axis && <line x1={vxMin} y1={0} x2={vxMax} y2={0} />}\n        {yAxisEnabled && yAxis.axis && <line x1={0} y1={vyMin} x2={0} y2={vyMax} />}\n      </g>\n\n      <g className=\"mafs-shadow\">\n        {xAxisEnabled && xAxis.labels && (\n          <XLabels separation={xAxis.lines || 1} labelMaker={xAxis.labels} />\n        )}\n        {yAxisEnabled && yAxis.labels && (\n          <YLabels separation={yAxis.lines || 1} labelMaker={yAxis.labels} />\n        )}\n      </g>\n    </g>\n  )\n}\n\nexport function snappedRange(min: number, max: number, step: number) {\n  const roundMin = Math.floor(min / step) * step\n  const roundMax = Math.ceil(max / step) * step\n\n  if (roundMin === roundMax - step) return [roundMin]\n  return range(roundMin, roundMax - step, step)\n}\n\nexport function autoPi(x: number): string {\n  if (x === 0) return \"0\"\n  if (Math.abs(Math.PI - x) < 0.001) return \"\u03C0\"\n  if (Math.abs(-Math.PI - x) < 0.001) return \"-\u03C0\"\n  return `${round(x / Math.PI, 5)}\u03C0`\n}\n", "import { usePaneContext } from \"../../context/PaneContext\"\nimport { useTransformContext } from \"../../context/TransformContext\"\nimport { range } from \"../../math\"\nimport { vec } from \"../../vec\"\nimport { XLabels, YLabels, defaultLabelMaker, AxisOptions, defaultAxisOptions } from \"./Axes\"\n\nconst thetas = range(0, 2 * Math.PI, Math.PI / 12)\n\nexport interface PolarCoordinatesProps {\n  xAxis?: Partial<AxisOptions> | false\n  yAxis?: Partial<AxisOptions> | false\n  lines?: number\n  subdivisions?: number\n}\n\nexport function PolarCoordinates({\n  xAxis: xAxisOverrides,\n  yAxis: yAxisOverrides,\n  lines = 1,\n  subdivisions,\n}: PolarCoordinatesProps) {\n  const xAxisEnabled = xAxisOverrides !== false\n  const yAxisEnabled = yAxisOverrides !== false\n\n  const xAxis = { ...defaultAxisOptions, ...xAxisOverrides } as AxisOptions\n  const yAxis = { ...defaultAxisOptions, ...yAxisOverrides } as AxisOptions\n\n  const { viewTransform } = useTransformContext()\n  const { xPaneRange, yPaneRange } = usePaneContext()\n\n  const [xMin, xMax] = xPaneRange\n  const [yMin, yMax] = yPaneRange\n\n  const distances = [\n    vec.mag([xMin, yMin]),\n    vec.mag([xMin, yMax]),\n    vec.mag([xMax, yMin]),\n    vec.mag([xMax, yMax]),\n    vec.mag([(xMin + xMax) / 2, (yMin + yMax) / 2]),\n  ]\n  const b = lines\n\n  const closeToOrigin = Math.min(...distances) < Math.max(xMax - xMin, yMax - yMin)\n  const minRadiusPrecise = closeToOrigin ? 0 : Math.min(...distances)\n  const maxRadiusPrecise = Math.max(...distances)\n\n  const minRadius = Math.floor(minRadiusPrecise / b) * b\n  const maxRadius = Math.ceil(maxRadiusPrecise / b) * b\n\n  const [vxMin, vyMin] = vec.transform([xMin, yMin], viewTransform)\n  const [vxMax, vyMax] = vec.transform([xMax, yMax], viewTransform)\n\n  const [scaleX, scaleY] = vec.transform([1, -1], viewTransform)\n\n  const rs = range(minRadius, maxRadius, b)\n  const subRs = subdivisions != undefined ? range(minRadius, maxRadius, b / subdivisions) : []\n\n  return (\n    <g fill=\"none\">\n      <g stroke=\"var(--grid-line-subdivision-color)\">\n        {thetas.map((theta) => (\n          <line\n            key={theta}\n            x1={0}\n            y1={0}\n            x2={Math.cos(theta) * maxRadius * scaleX}\n            y2={-Math.sin(theta) * maxRadius * scaleY}\n          />\n        ))}\n      </g>\n\n      {subRs.map((r) => (\n        <ellipse\n          data-r={r}\n          key={r}\n          cx={0}\n          cy={0}\n          rx={r * scaleX}\n          ry={r * scaleY}\n          stroke=\"var(--grid-line-subdivision-color)\"\n        />\n      ))}\n\n      {rs.map((r) => (\n        <ellipse\n          data-r={r}\n          key={r}\n          cx={0}\n          cy={0}\n          rx={r * scaleX}\n          ry={r * scaleY}\n          stroke=\"var(--mafs-line-color)\"\n        />\n      ))}\n\n      <g stroke=\"var(--mafs-origin-color)\">\n        {xAxisEnabled && xAxis.axis && <line x1={vxMin} y1={0} x2={vxMax} y2={0} />}\n        {yAxisEnabled && yAxis.axis && <line x1={0} y1={vyMin} x2={0} y2={vyMax} />}\n      </g>\n\n      <g className=\"mafs-shadow\">\n        {xAxisEnabled && xAxis.labels && (\n          <XLabels\n            separation={xAxisOverrides?.lines || lines || 1}\n            labelMaker={xAxis.labels || defaultLabelMaker}\n          />\n        )}\n        {yAxisEnabled && yAxis.labels && (\n          <YLabels\n            separation={yAxisOverrides?.lines || lines || 1}\n            labelMaker={yAxis.labels || defaultLabelMaker}\n          />\n        )}\n      </g>\n    </g>\n  )\n}\n", "import { Cartesian } from \"./Cartesian\"\nimport { PolarCoordinates as Polar } from \"./Polar\"\n\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nPolar.displayName = \"Coordinates.Polar\"\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nCartesian.displayName = \"Coordinates.Cartesian\"\n\nexport const Coordinates = {\n  Cartesian,\n  Polar,\n}\n", "import * as React from \"react\"\nimport { usePaneContext } from \"../../context/PaneContext\"\nimport { Parametric, ParametricProps } from \"./Parametric\"\nimport { vec } from \"../../vec\"\n\nexport interface OfXProps extends Omit<ParametricProps, \"xy\" | \"t\"> {\n  y: (x: number) => number\n  svgPathProps?: React.SVGProps<SVGPathElement>\n}\n\nexport function OfX({ y, ...props }: OfXProps) {\n  const {\n    xPaneRange: [xMin, xMax],\n  } = usePaneContext()\n\n  const xy = React.useCallback<ParametricProps[\"xy\"]>((x) => [x, y(x)], [y])\n  const t = React.useMemo<vec.Vector2>(() => [xMin, xMax], [xMin, xMax])\n\n  return <Parametric xy={xy} t={t} {...props} />\n}\n\nexport interface OfYProps extends Omit<ParametricProps, \"xy\" | \"t\"> {\n  x: (y: number) => number\n  svgPathProps?: React.SVGProps<SVGPathElement>\n}\n\nexport function OfY({ x, ...props }: OfYProps) {\n  const {\n    yPaneRange: [yMin, yMax],\n  } = usePaneContext()\n\n  const xy = React.useCallback<ParametricProps[\"xy\"]>((y) => [x(y), y], [x])\n  const t = React.useMemo<vec.Vector2>(() => [yMin, yMax], [yMin, yMax])\n\n  return <Parametric xy={xy} t={t} {...props} />\n}\n", "import * as React from \"react\"\nimport { vec } from \"../../vec\"\nimport { Stroked } from \"../Theme\"\nimport { useTransformContext } from \"../../context/TransformContext\"\nimport { sampleParametric } from \"./PlotUtils\"\n\nexport interface ParametricProps extends Stroked {\n  /** A function that takes a `t` value and returns a point. */\n  xy: (t: number) => vec.Vector2\n  /** The domain `t` between which to evaluate `xy`. */\n  t: vec.Vector2\n  /** The minimum recursive depth of the sampling algorithm. */\n  minSamplingDepth?: number\n  /** The maximum recursive depth of the sampling algorithm. */\n  maxSamplingDepth?: number\n\n  svgPathProps?: React.SVGProps<SVGPathElement>\n}\n\nexport function Parametric({\n  xy,\n  t,\n  color,\n  style = \"solid\",\n  weight = 2,\n  opacity = 1.0,\n  maxSamplingDepth = 14,\n  minSamplingDepth = 8,\n  svgPathProps = {},\n}: ParametricProps) {\n  const { viewTransform } = useTransformContext()\n\n  // Negative because the y-axis is flipped in the SVG coordinate system.\n  const pixelsPerSquare = -vec.det(viewTransform)\n\n  const [tMin, tMax] = t\n  const errorThreshold = 0.1 / pixelsPerSquare\n\n  const svgPath = React.useMemo(\n    () => sampleParametric(xy, [tMin, tMax], minSamplingDepth, maxSamplingDepth, errorThreshold),\n    [xy, minSamplingDepth, maxSamplingDepth, errorThreshold, tMin, tMax]\n  )\n\n  return (\n    <path\n      d={svgPath}\n      strokeWidth={weight}\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeDasharray={style === \"dashed\" ? \"1,10\" : undefined}\n      {...svgPathProps}\n      style={{\n        stroke: color || \"var(--mafs-fg)\",\n        strokeOpacity: opacity,\n        vectorEffect: \"non-scaling-stroke\",\n        transform: \"var(--mafs-view-transform)\",\n        ...(svgPathProps.style || {}),\n      }}\n    />\n  )\n}\n", "import { vec } from \"../../vec\"\n\ninterface SampleParams<P> {\n  /** The function to sample */\n  fn: (t: number) => P\n  /** A function that computes the error between a real sample function output and a midpoint output */\n  error: (real: P, estimate: P) => number\n  /** A function that computes the midpoint of two sample function outputs */\n  midpoint: (p1: P, p2: P) => P\n  /** A function that is called whenever a point should be part of the sample */\n  onPoint: (t: number, p: P) => void\n  /** The domain to sample */\n  domain: [min: number, max: number]\n  /** The minimum recursion depth */\n  minDepth: number\n  /** The maximum recursion depth */\n  maxDepth: number\n  /** The maximium tolerated error returned by the error function */\n  threshold: number\n}\n\n/**\n * A relatively generic internal function which, given a function, domain, and\n * an error function, will recursively subdivide the domain until sampling said\n * function at each point in the domain yields an error less than the supplied\n * threshold. Importantly, this makes no assumptions about the return type of\n * the sampled function.\n */\nfunction sample<SampledReturnType>({\n  domain,\n  minDepth,\n  maxDepth,\n  threshold,\n  fn,\n  error,\n  onPoint,\n  midpoint,\n}: SampleParams<SampledReturnType>) {\n  const [min, max] = domain\n\n  function subdivide(\n    min: number,\n    max: number,\n    pushLeft: boolean,\n    pushRight: boolean,\n    depth: number,\n    pMin: SampledReturnType,\n    pMax: SampledReturnType\n  ) {\n    const t = 0.5\n    const mid = min + (max - min) * t\n    const pMid = fn(mid)\n\n    if (depth < minDepth) {\n      subdivide(min, mid, true, false, depth + 1, pMin, pMid)\n      subdivide(mid, max, false, true, depth + 1, pMid, pMax)\n      return\n    }\n\n    if (depth < maxDepth) {\n      const fnMidpoint = midpoint(pMin, pMax)\n      const e = error(pMid, fnMidpoint)\n      if (e > threshold) {\n        subdivide(min, mid, true, false, depth + 1, pMin, pMid)\n        subdivide(mid, max, false, true, depth + 1, pMid, pMax)\n        return\n      }\n    }\n\n    if (pushLeft) {\n      onPoint(min, pMin)\n    }\n    onPoint(mid, pMid)\n    if (pushRight) {\n      onPoint(max, pMax)\n    }\n  }\n\n  subdivide(min, max, true, true, 0, fn(min), fn(max))\n}\n\nexport function sampleParametric(\n  fn: (t: number) => vec.Vector2,\n  domain: vec.Vector2,\n  minDepth: number,\n  maxDepth: number,\n  threshold: number\n) {\n  let result = \"M \"\n\n  sample({\n    fn,\n    error: (a, b) => vec.squareDist(a, b),\n    onPoint: (_t, [x, y]) => {\n      if (Number.isFinite(x) && Number.isFinite(y)) {\n        result += `${x} ${y} L `\n      }\n    },\n    midpoint: (p1, p2) => vec.midpoint(p1, p2),\n    domain,\n    minDepth,\n    maxDepth,\n    threshold,\n  })\n\n  return result.substring(0, result.length - 2)\n}\n\nexport function sampleInequality(\n  rangeAxis: \"x\" | \"y\",\n  upper: (t: number) => number,\n  lower: (t: number) => number,\n  domain: vec.Vector2,\n  minDepth: number,\n  maxDepth: number,\n  threshold: number\n) {\n  const result = { fill: \"\", upper: \"\", lower: \"\" }\n\n  let upperTmp = \"\"\n  let lowerTmp = \"\"\n  let ineqFalse = false\n\n  let prevX = 0\n  let prevUpper = 0\n  let prevLower = 0\n\n  function pointToString(x: number, y: number) {\n    return rangeAxis === \"x\" ? `${x} ${y}` : `${y} ${x}`\n  }\n\n  sample<[vec.Vector2, vec.Vector2]>({\n    domain,\n    minDepth,\n    maxDepth,\n    threshold,\n    fn: (x) => [\n      [x, lower(x)],\n      [x, upper(x)],\n    ],\n    error: ([realLower, realUpper], [estLower, estUpper]) => {\n      return Math.max(vec.squareDist(realLower, estLower), vec.squareDist(realUpper, estUpper))\n    },\n    midpoint: ([aLower, aUpper], [bLower, bUpper]) => {\n      return [vec.midpoint(aLower, bLower), vec.midpoint(aUpper, bUpper)]\n    },\n    onPoint: (x, [[, lower], [, upper]]) => {\n      // TODO: these inequality operators should reflect the props, perhaps\n      // the inequality operator itself should be a function passed into this\n      const pathsJustCrossed = upper < lower && !ineqFalse\n      const pathsJustUncrossed = upper > lower && ineqFalse\n\n      if (pathsJustCrossed) {\n        ineqFalse = true\n\n        if (upperTmp && lowerTmp) {\n          const midX = (prevX + x) / 2\n          const midUpper = (prevUpper + upper) / 2\n          const midLower = (prevLower + lower) / 2\n          const midY = (midUpper + midLower) / 2\n          upperTmp += ` ${pointToString(midX, midY)} L `\n          lowerTmp = ` ${pointToString(midX, midY)} L ` + lowerTmp\n\n          result.fill += ` M ${upperTmp} ${lowerTmp.substring(0, lowerTmp.length - 2)} z `\n          result.upper += ` M ${upperTmp.substring(0, upperTmp.length - 2)} `\n          result.lower += ` M ${lowerTmp.substring(0, lowerTmp.length - 2)} `\n          upperTmp = \"\"\n          lowerTmp = \"\"\n        }\n      } else if (pathsJustUncrossed) {\n        ineqFalse = false\n        const midX = (prevX + x) / 2\n        const midUpper = (prevUpper + upper) / 2\n        const midLower = (prevLower + lower) / 2\n        const midY = (midUpper + midLower) / 2\n        upperTmp += ` ${pointToString(midX, midY)} L `\n        lowerTmp = ` ${pointToString(midX, midY)} L ` + lowerTmp\n      }\n\n      if (!ineqFalse) {\n        if (Number.isFinite(upper)) {\n          upperTmp = upperTmp + ` ${pointToString(x, upper)} L `\n        }\n        if (Number.isFinite(lower)) {\n          lowerTmp = ` ${pointToString(x, lower)} L ` + lowerTmp\n        }\n      }\n\n      prevX = x\n      prevUpper = upper\n      prevLower = lower\n    },\n  })\n\n  // Push on the remaining upper and lower tmps, if any\n  if (upperTmp && lowerTmp) {\n    result.fill += ` M ${upperTmp} ${lowerTmp.substring(0, lowerTmp.length - 2)} z `\n    result.lower += ` M ${lowerTmp.substring(0, lowerTmp.length - 2)} `\n    result.upper += ` M ${upperTmp.substring(0, upperTmp.length - 2)} `\n  }\n\n  return result\n}\n", "export const Theme = {\n  foreground: \"var(--mafs-fg)\",\n  background: \"var(--mafs-bg)\",\n\n  red: \"var(--mafs-red)\",\n  orange: \"var(--mafs-orange)\",\n  green: \"var(--mafs-green)\",\n  blue: \"var(--mafs-blue)\",\n  indigo: \"var(--mafs-indigo)\",\n  violet: \"var(--mafs-violet)\",\n  pink: \"var(--mafs-pink)\",\n  yellow: \"var(--mafs-yellow)\",\n}\n\nexport interface Filled {\n  color?: string\n  weight?: number\n  fillOpacity?: number\n  strokeOpacity?: number\n  strokeStyle?: \"solid\" | \"dashed\"\n}\n\nexport interface Stroked {\n  color?: string\n  opacity?: number\n  weight?: number\n  style?: \"solid\" | \"dashed\"\n}\n", "import { clamp } from \"../../math\"\nimport { vec } from \"../../vec\"\nimport { usePaneContext } from \"../../context/PaneContext\"\nimport { Theme } from \"../Theme\"\nimport { useTransformContext } from \"../../context/TransformContext\"\n\nexport interface VectorFieldProps {\n  xy: (point: vec.Vector2) => vec.Vector2\n  xyOpacity?: (point: vec.Vector2) => number\n  step: number\n  opacityStep?: number\n  color?: string\n}\n\nconst xyOpacityDefault = () => 1\n\nexport function VectorField({\n  xy,\n  step = 1,\n  xyOpacity = xyOpacityDefault,\n  opacityStep = xyOpacity === xyOpacityDefault ? 1 : 0.2,\n  color = Theme.foreground,\n}: VectorFieldProps) {\n  const { viewTransform: pixelMatrix } = useTransformContext()\n  const { xPanes, yPanes } = usePaneContext()\n\n  //Impose restrictions on opacityStep\n  opacityStep = Math.min(1, Math.max(0.01, opacityStep))\n  //Calculate granularity from step\n  const opacityGrainularity = Math.ceil(1 / opacityStep)\n  //Create layers\n  const layers = generateOpacityLayers(opacityGrainularity)\n\n  function fieldForRegion(xMin: number, xMax: number, yMin: number, yMax: number) {\n    for (let x = Math.floor(xMin); x <= Math.ceil(xMax); x += step) {\n      for (let y = Math.floor(yMin); y <= Math.ceil(yMax); y += step) {\n        const tail: vec.Vector2 = [x, y]\n        const trueOffset = xy([x, y])\n        const trueMag = vec.mag(trueOffset)\n        const scaledOffset = vec.scale(vec.normalize(trueOffset), Math.min(trueMag, step * 0.75))\n        const tip = vec.add(tail, scaledOffset)\n\n        const pixelTail = vec.transform(tail, pixelMatrix)\n        const pixelTipOffset = vec.transform(scaledOffset, pixelMatrix)\n        const pixelSize = vec.mag(pixelTipOffset)\n        const pixelTip = vec.transform(tip, pixelMatrix)\n\n        const arrowVector = vec.scale(vec.normalize(pixelTipOffset), Math.min(pixelSize, 5))\n        const left = vec.add(pixelTip, vec.rotate(arrowVector, (5 / 6) * Math.PI))\n        const right = vec.add(pixelTip, vec.rotate(arrowVector, -(5 / 6) * Math.PI))\n\n        const trueOpacity = xyOpacity([x, y])\n        const layer = findClosetLayer(layers, trueOpacity)\n        layer.d +=\n          ` M ${pixelTail[0]} ${pixelTail[1]}` +\n          ` L ${pixelTip[0]} ${pixelTip[1]} ` +\n          ` L ${left[0]} ${left[1]} ` +\n          ` L ${right[0]} ${right[1]} ` +\n          ` L ${pixelTip[0]} ${pixelTip[1]} `\n      }\n    }\n  }\n\n  for (const [xMin, xMax] of xPanes) {\n    for (const [yMin, yMax] of yPanes) {\n      fieldForRegion(xMin, xMax, yMin, yMax)\n    }\n  }\n\n  return (\n    <>\n      {layers.map((layer, index) => (\n        <path\n          d={layer.d}\n          key={index}\n          style={{\n            stroke: color,\n            fill: color,\n            opacity: layer.opacity,\n            fillOpacity: layer.opacity,\n            strokeOpacity: layer.opacity,\n          }}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      ))}\n    </>\n  )\n}\n\ninterface Layer {\n  d: string\n  opacity: number\n}\n\n/**\n * Generates a list of layers. Each layer will eventually be convereted to a <path>\n * with a certain opacity.\n *\n * The higher the opacityGrainularity, the more fidelity you get accross opacities,\n * however the more layers you have, the more lag you get.\n *\n * @param opacityGrainularity the granulity of the opacity layers\n * @returns a list of layers\n */\nfunction generateOpacityLayers(opacityGrainularity: number): Layer[] {\n  const layers: Layer[] = []\n  const step = 1 / opacityGrainularity\n  for (let i = 1; i > 0; i -= step) {\n    const layer: Layer = {\n      d: \"\",\n      opacity: i,\n    }\n    layers.push(layer)\n  }\n  return layers\n}\n\n/**\n * Takes in a pointOpacity (a number) and returns the layer it belongs to from layers.\n *\n * @param layers the layers to catagorize pointOpacity to.\n * @param pointOpacity the opacity to categorize to a layer.\n * @return the layer that this opacity value belongs to.\n */\nfunction findClosetLayer(layers: Layer[], pointOpacity: number): Layer {\n  pointOpacity = clamp(pointOpacity, 0, 1)\n  const index = layers.length - 1 - Math.round(pointOpacity * (layers.length - 1))\n  return layers[index]\n}\n", "import * as React from \"react\"\nimport { Theme } from \"../Theme\"\nimport { sampleInequality } from \"./PlotUtils\"\nimport { usePaneContext } from \"../../context/PaneContext\"\nimport invariant from \"tiny-invariant\"\nimport { vec } from \"../../vec\"\n\nconst enum BoundType {\n  UNBOUNDED = 0,\n  EQUAL,\n  INEQUAL,\n}\n\ntype FnX = ((x: number) => number) | number\ntype FnY = ((y: number) => number) | number\n\nexport interface InequalityProps {\n  y?: { \">\"?: FnX; \"<=\"?: FnX; \"<\"?: FnX; \">=\"?: FnX }\n  x?: { \">\"?: FnY; \"<=\"?: FnY; \"<\"?: FnY; \">=\"?: FnY }\n  color?: string\n  weight?: number\n  strokeColor?: string\n  strokeOpacity?: number\n  fillColor?: string\n  fillOpacity?: number\n\n  minSamplingDepth?: number\n  maxSamplingDepth?: number\n\n  upperColor?: string\n  upperOpacity?: number\n  upperWeight?: number\n  lowerColor?: string\n  lowerOpacity?: number\n  lowerWeight?: number\n\n  svgUpperPathProps?: React.SVGProps<SVGPathElement>\n  svgLowerPathProps?: React.SVGProps<SVGPathElement>\n  svgFillPathProps?: React.SVGProps<SVGPathElement>\n}\n\nexport function Inequality({\n  x,\n  y,\n  color = Theme.foreground,\n  weight = 2,\n  strokeColor = color,\n  strokeOpacity = 1.0,\n  fillColor = color,\n  fillOpacity = 0.15,\n\n  minSamplingDepth = 10,\n  maxSamplingDepth = 14,\n\n  upperColor = strokeColor,\n  upperOpacity = strokeOpacity,\n  upperWeight = weight,\n  lowerColor = strokeColor,\n  lowerOpacity = strokeOpacity,\n  lowerWeight = weight,\n\n  svgUpperPathProps = {},\n  svgLowerPathProps = {},\n  svgFillPathProps = {},\n}: InequalityProps) {\n  const {\n    xPaneRange: [xMin, xMax],\n    yPaneRange: [yMin, yMax],\n  } = usePaneContext()\n\n  const domain: vec.Vector2 = y ? [xMin, xMax] : [yMin, yMax]\n  const range: vec.Vector2 = y ? [yMin, yMax] : [xMin, xMax]\n  const fn = y ? y : x\n\n  invariant(\n    fn && (x === undefined) !== (y === undefined),\n    \"You must pass either an x or y set of functions to Inequality (but not both)\"\n  )\n\n  // Make sure only valid combinations of inequality operators are passed\n  invariant(\n    (fn[\"<\"] === undefined || fn[\"<=\"] === undefined) &&\n      (fn[\">\"] === undefined || fn[\">=\"] === undefined),\n    \"You cannot pass both an inequality and an equality operator to Inequality\"\n  )\n\n  let upperBoundType = BoundType.UNBOUNDED\n  if (\"<=\" in fn) upperBoundType = BoundType.EQUAL\n  if (\"<\" in fn) upperBoundType = BoundType.INEQUAL\n\n  let lowerBoundType = BoundType.UNBOUNDED\n  if (\">=\" in fn) lowerBoundType = BoundType.EQUAL\n  if (\">\" in fn) lowerBoundType = BoundType.INEQUAL\n\n  let greaterFn = fn[\"<\"] ?? fn[\"<=\"] ?? (() => range[1])\n  let lesserFn = fn[\">\"] ?? fn[\">=\"] ?? (() => range[0])\n\n  if (typeof greaterFn === \"number\") {\n    const greater = greaterFn\n    greaterFn = () => greater\n  }\n  if (typeof lesserFn === \"number\") {\n    const lesser = lesserFn\n    lesserFn = () => lesser\n  }\n\n  const svgPath = sampleInequality(\n    y ? \"x\" : \"y\",\n    greaterFn,\n    lesserFn,\n    domain,\n    minSamplingDepth,\n    maxSamplingDepth,\n    0.1\n  )\n\n  return (\n    <g>\n      <path\n        d={svgPath.fill}\n        style={{\n          fill: fillColor || \"var(--mafs-fg)\",\n          fillOpacity,\n          stroke: \"none\",\n          transform: \"var(--mafs-view-transform)\",\n          vectorEffect: \"non-scaling-stroke\",\n          ...svgFillPathProps?.style,\n        }}\n        {...svgFillPathProps}\n      />\n\n      {upperBoundType != BoundType.UNBOUNDED && (\n        <path\n          d={svgPath.upper}\n          strokeWidth={upperWeight}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeDasharray={upperBoundType === BoundType.INEQUAL ? \"4,8\" : \"\"}\n          style={{\n            fill: \"none\",\n            stroke: upperColor,\n            strokeOpacity: upperOpacity,\n            transform: \"var(--mafs-view-transform)\",\n            vectorEffect: \"non-scaling-stroke\",\n            ...svgUpperPathProps?.style,\n          }}\n          {...svgUpperPathProps}\n        />\n      )}\n\n      {lowerBoundType != BoundType.UNBOUNDED && (\n        <path\n          d={svgPath.lower}\n          strokeWidth={lowerWeight}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeDasharray={lowerBoundType === BoundType.INEQUAL ? \"4,8\" : \"\"}\n          style={{\n            fill: \"none\",\n            stroke: lowerColor,\n            strokeOpacity: lowerOpacity,\n            transform: \"var(--mafs-view-transform)\",\n            vectorEffect: \"non-scaling-stroke\",\n            ...svgLowerPathProps?.style,\n          }}\n          {...svgLowerPathProps}\n        />\n      )}\n    </g>\n  )\n}\n", "import { OfX, OfY } from \"./Plot/Simple\"\nimport { Parametric } from \"./Plot/Parametric\"\nimport { VectorField } from \"./Plot/VectorField\"\nimport { Inequality } from \"./Plot/Inequality\"\n\nexport const Plot = {\n  OfX,\n  OfY,\n  Parametric,\n  VectorField,\n  Inequality,\n}\n\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nPlot.OfX.displayName = \"Plot.OfX\"\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nPlot.OfY.displayName = \"Plot.OfY\"\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nPlot.Parametric.displayName = \"Plot.Parametric\"\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nPlot.VectorField.displayName = \"Plot.VectorField\"\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nPlot.Inequality.displayName = \"Plot.Inequality\"\n\nimport type { InequalityProps } from \"./Plot/Inequality\"\nimport type { OfXProps, OfYProps } from \"./Plot/Simple\"\nimport type { ParametricProps } from \"./Plot/Parametric\"\nimport type { VectorFieldProps } from \"./Plot/VectorField\"\nexport type { InequalityProps, OfXProps, OfYProps, ParametricProps, VectorFieldProps }\n", "import { Stroked, Theme } from \"../../display/Theme\"\nimport { useTransformContext } from \"../../context/TransformContext\"\nimport { round } from \"../../math\"\nimport { vec } from \"../../vec\"\nimport { usePaneContext } from \"../../context/PaneContext\"\n\nexport interface ThroughPointsProps extends Stroked {\n  point1: vec.Vector2\n  point2: vec.Vector2\n}\n\nexport function ThroughPoints({\n  point1,\n  point2,\n  color = Theme.foreground,\n  style = \"solid\",\n  weight = 2,\n  opacity = 1.0,\n}: ThroughPointsProps) {\n  const { xPaneRange, yPaneRange } = usePaneContext()\n  const [xMin, xMax] = xPaneRange\n  const [yMin, yMax] = yPaneRange\n\n  const { userTransform } = useTransformContext()\n\n  const tPoint1 = vec.transform(point1, userTransform)\n  const tPoint2 = vec.transform(point2, userTransform)\n\n  const slope = (tPoint2[1] - tPoint1[1]) / (tPoint2[0] - tPoint1[0])\n\n  let offscreen1: vec.Vector2\n  let offscreen2: vec.Vector2\n\n  if (Math.abs(Math.atan(slope)) > Math.PI / 4) {\n    offscreen1 = [(yMin - tPoint1[1]) / slope + tPoint1[0], yMin]\n    offscreen2 = [(yMax - tPoint1[1]) / slope + tPoint1[0], yMax]\n  } else {\n    offscreen1 = [xMin, slope * (xMin - tPoint1[0]) + tPoint1[1]]\n    offscreen2 = [xMax, slope * (xMax - tPoint1[0]) + tPoint1[1]]\n  }\n\n  return (\n    <line\n      x1={round(offscreen1[0], 2)}\n      y1={round(offscreen1[1], 2)}\n      x2={round(offscreen2[0], 2)}\n      y2={round(offscreen2[1], 2)}\n      style={{\n        stroke: color,\n        transform: \"var(--mafs-view-transform)\",\n        vectorEffect: \"non-scaling-stroke\",\n      }}\n      strokeWidth={weight}\n      opacity={opacity}\n      strokeDasharray={style === \"dashed\" ? \"4,3\" : undefined}\n    />\n  )\n}\n", "import { Stroked } from \"../../display/Theme\"\nimport { vec } from \"../../vec\"\nimport { ThroughPoints } from \"./ThroughPoints\"\n\nexport interface PointAngleProps extends Stroked {\n  point: vec.Vector2\n  angle: number\n}\n\nexport function PointAngle({ point, angle, ...rest }: PointAngleProps) {\n  const point2 = vec.add(point, vec.rotate([1, 0], angle))\n  return <ThroughPoints point1={point} point2={point2} {...rest} />\n}\n", "import { Stroked } from \"../../display/Theme\"\nimport { vec } from \"../../vec\"\nimport { PointAngle } from \"./PointAngle\"\n\nexport interface PointSlopeProps extends Stroked {\n  point: vec.Vector2\n  slope: number\n}\n\nexport function PointSlope({ point, slope, ...rest }: PointSlopeProps) {\n  return <PointAngle point={point} angle={Math.atan(slope)} {...rest} />\n}\n", "import { Stroked, Theme } from \"../../display/Theme\"\nimport { useTransformContext } from \"../../context/TransformContext\"\nimport { round } from \"../../math\"\nimport { vec } from \"../../vec\"\n\nexport interface SegmentProps extends Stroked {\n  point1: vec.Vector2\n  point2: vec.Vector2\n}\n\nexport function Segment({\n  point1,\n  point2,\n  color = Theme.foreground,\n  style = \"solid\",\n  weight = 2,\n  opacity = 1.0,\n}: SegmentProps) {\n  const { viewTransform: pixelMatrix, userTransform } = useTransformContext()\n  const transform = vec.matrixMult(pixelMatrix, userTransform)\n\n  const scaledPoint1 = vec.transform(point1, transform)\n  const scaledPoint2 = vec.transform(point2, transform)\n\n  return (\n    <line\n      x1={round(scaledPoint1[0], 2)}\n      y1={round(scaledPoint1[1], 2)}\n      x2={round(scaledPoint2[0], 2)}\n      y2={round(scaledPoint2[1], 2)}\n      style={{ stroke: color }}\n      strokeWidth={weight}\n      opacity={opacity}\n      strokeDasharray={style === \"dashed\" ? \"1,10\" : undefined}\n    />\n  )\n}\n\nexport default Segment\n", "import { PointAngle } from \"./Line/PointAngle\"\nimport { PointSlope } from \"./Line/PointSlope\"\nimport { ThroughPoints } from \"./Line/ThroughPoints\"\nimport { Segment } from \"./Line/Segment\"\n\nexport const Line = {\n  PointAngle,\n  PointSlope,\n  ThroughPoints,\n  Segment,\n}\n\nimport type { PointAngleProps } from \"./Line/PointAngle\"\nimport type { PointSlopeProps } from \"./Line/PointSlope\"\nimport type { ThroughPointsProps } from \"./Line/ThroughPoints\"\nimport type { SegmentProps } from \"./Line/Segment\"\nexport type { PointAngleProps, PointSlopeProps, ThroughPointsProps, SegmentProps }\n\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nLine.PointAngle.displayName = \"Line.PointAngle\"\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nLine.PointSlope.displayName = \"Line.PointSlope\"\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nLine.Segment.displayName = \"Line.Segment\"\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nLine.ThroughPoints.displayName = \"Line.ThroughPoints\"\n", "import * as React from \"react\"\nimport { Filled, Theme } from \"./Theme\"\nimport { useTransformContext } from \"../context/TransformContext\"\nimport { vec } from \"../vec\"\n\nexport interface EllipseProps extends Filled {\n  center: vec.Vector2\n  radius: vec.Vector2\n  angle?: number\n  svgEllipseProps?: React.SVGProps<SVGEllipseElement>\n}\n\nexport function Ellipse({\n  center,\n  radius,\n  angle = 0,\n  strokeStyle = \"solid\",\n  strokeOpacity = 1.0,\n  weight = 2,\n  color = Theme.foreground,\n  fillOpacity = 0.15,\n  svgEllipseProps = {},\n}: EllipseProps) {\n  const { viewTransform: toPx, userTransform } = useTransformContext()\n\n  const transform = vec\n    .matrixBuilder()\n    .translate(...center)\n    .mult(userTransform)\n    .scale(1, -1)\n    .mult(toPx)\n    .scale(1, -1)\n    .get()\n\n  const cssTransform = `\n    ${vec.toCSS(transform)}\n    rotate(${angle * (180 / Math.PI)})\n  `\n\n  return (\n    <ellipse\n      cx={0}\n      cy={0}\n      rx={radius[0]}\n      ry={radius[1]}\n      strokeWidth={weight}\n      strokeDasharray={strokeStyle === \"dashed\" ? \"4,3\" : undefined}\n      transform={cssTransform}\n      {...svgEllipseProps}\n      style={{\n        stroke: color,\n        fill: color,\n        fillOpacity,\n        strokeOpacity,\n        vectorEffect: \"non-scaling-stroke\",\n        ...(svgEllipseProps.style || {}),\n      }}\n    />\n  )\n}\n\nEllipse.displayName = \"Ellipse\"\n", "import { Filled } from \"./Theme\"\nimport { Ellipse } from \"./Ellipse\"\nimport { vec } from \"../vec\"\nimport type * as React from \"react\"\n\nexport interface CircleProps extends Filled {\n  center: vec.Vector2\n  radius: number\n  svgEllipseProps?: React.SVGProps<SVGEllipseElement>\n}\n\nexport function Circle({ radius, ...rest }: CircleProps) {\n  return <Ellipse radius={[radius, radius]} {...rest} />\n}\n\nCircle.displayName = \"Circle\"\n", "import * as React from \"react\"\nimport { Filled, Theme } from \"./Theme\"\nimport { vec } from \"../vec\"\nimport { useTransformContext } from \"../context/TransformContext\"\n\ntype SVGPolyProps<T extends \"polygon\" | \"polyline\"> = T extends \"polygon\"\n  ? React.SVGProps<SVGPolygonElement>\n  : React.SVGProps<SVGPolylineElement>\n\nexport interface PolyBaseProps extends Filled {\n  points: vec.Vector2[]\n}\n\ninterface PolyBaseInternalProps<T extends \"polygon\" | \"polyline\"> extends PolyBaseProps {\n  element: T\n  svgPolyProps?: SVGPolyProps<T>\n}\n\nexport function PolyBase({\n  element: PolyElement,\n  points,\n  color = Theme.foreground,\n  weight = 2,\n  fillOpacity = 0.15,\n  strokeOpacity = 1.0,\n  strokeStyle = \"solid\",\n  svgPolyProps = {},\n}: PolyBaseInternalProps<\"polygon\"> | PolyBaseInternalProps<\"polyline\">) {\n  const { userTransform } = useTransformContext()\n\n  const scaledPoints = points\n    .map((point) => vec.transform(point, userTransform).join(\" \"))\n    .join(\" \")\n\n  return (\n    <PolyElement\n      points={scaledPoints}\n      strokeWidth={weight}\n      fillOpacity={fillOpacity}\n      strokeDasharray={strokeStyle === \"dashed\" ? \"4,3\" : undefined}\n      strokeLinejoin=\"round\"\n      {...svgPolyProps}\n      style={{\n        fill: color,\n        fillOpacity,\n        stroke: color,\n        strokeOpacity,\n        vectorEffect: \"non-scaling-stroke\",\n        transform: \"var(--mafs-view-transform)\",\n        ...(svgPolyProps.style || {}),\n      }}\n    />\n  )\n}\n", "import * as React from \"react\"\nimport { PolyBase, PolyBaseProps } from \"./PolyBase\"\n\nexport interface PolygonProps extends PolyBaseProps {\n  svgPolygonProps?: React.SVGProps<SVGPolygonElement>\n}\n\nexport function Polygon({ svgPolygonProps, ...otherProps }: PolygonProps) {\n  return <PolyBase element=\"polygon\" svgPolyProps={svgPolygonProps} {...otherProps} />\n}\n\nPolygon.displayName = \"Polygon\"\n", "import * as React from \"react\"\nimport { PolyBase, PolyBaseProps } from \"./PolyBase\"\n\nexport interface PolylineProps extends PolyBaseProps {\n  svgPolylineProps?: React.SVGProps<SVGPolylineElement>\n}\n\nexport function Polyline({ fillOpacity = 0, svgPolylineProps, ...otherProps }: PolylineProps) {\n  return (\n    <PolyBase\n      element=\"polyline\"\n      fillOpacity={fillOpacity}\n      svgPolyProps={svgPolylineProps}\n      {...otherProps}\n    />\n  )\n}\n\nPolyline.displayName = \"Polyline\"\n", "import * as React from \"react\"\nimport { useTransformContext } from \"../context/TransformContext\"\nimport { Theme } from \"./Theme\"\nimport { vec } from \"../vec\"\n\nexport interface PointProps {\n  x: number\n  y: number\n  color?: string\n  opacity?: number\n  svgCircleProps?: React.SVGProps<SVGCircleElement>\n}\n\nexport function Point({\n  x,\n  y,\n  color = Theme.foreground,\n  opacity = 1,\n  svgCircleProps = {},\n}: PointProps) {\n  const { viewTransform: pixelMatrix, userTransform: transform } = useTransformContext()\n\n  const [cx, cy] = vec.transform([x, y], vec.matrixMult(pixelMatrix, transform))\n\n  return (\n    <circle\n      cx={cx}\n      cy={cy}\n      r={6}\n      {...svgCircleProps}\n      style={{ fill: color, opacity, ...svgCircleProps.style }}\n    />\n  )\n}\n\nPoint.displayName = \"Point\"\n", "import * as React from \"react\"\nimport { Stroked } from \"../display/Theme\"\nimport { Theme } from \"./Theme\"\nimport { vec } from \"../vec\"\nimport { useTransformContext } from \"../context/TransformContext\"\n\n// This is sort of a hack\u2014every SVG pattern on a page needs a unique ID, otherwise they conflict.\nlet incrementer = 0\n\nexport interface VectorProps extends Stroked {\n  tail?: vec.Vector2\n  tip: vec.Vector2\n  svgLineProps?: React.SVGProps<SVGLineElement>\n}\n\nexport function Vector({\n  tail = [0, 0],\n  tip,\n  color = Theme.foreground,\n  weight = 2,\n  style = \"solid\",\n  opacity = 1.0,\n  svgLineProps = {},\n}: VectorProps) {\n  const { userTransform, viewTransform } = useTransformContext()\n  const combinedTransform = vec.matrixMult(viewTransform, userTransform)\n\n  const pixelTail = vec.transform(tail, combinedTransform)\n  const pixelTip = vec.transform(tip, combinedTransform)\n\n  const id = React.useMemo(() => `mafs-triangle-${incrementer++}`, [])\n\n  return (\n    <>\n      <defs>\n        <marker id={id} markerWidth=\"8\" markerHeight=\"8\" refX=\"8\" refY=\"4\" orient=\"auto\">\n          <path d=\"M 0 0 L 8 4 L 0 8 z\" fill={color || \"var(--mafs-fg)\"} />\n        </marker>\n      </defs>\n      <line\n        x1={pixelTail[0]}\n        y1={pixelTail[1]}\n        x2={pixelTip[0]}\n        y2={pixelTip[1]}\n        strokeWidth={weight}\n        markerEnd={`url(#${id})`}\n        strokeDasharray={style === \"dashed\" ? \"4,3\" : undefined}\n        {...svgLineProps}\n        style={{\n          stroke: color || \"var(--mafs-fg)\",\n          strokeOpacity: opacity,\n          ...(svgLineProps?.style || {}),\n          vectorEffect: \"non-scaling-stroke\",\n        }}\n      />\n    </>\n  )\n}\n\nVector.displayName = \"Vector\"\n", "import * as React from \"react\"\nimport { vec } from \"../vec\"\nimport { useTransformContext } from \"../context/TransformContext\"\n\nexport type CardinalDirection = \"n\" | \"ne\" | \"e\" | \"se\" | \"s\" | \"sw\" | \"w\" | \"nw\"\n\nexport type TextProps = React.PropsWithChildren<{\n  x: number\n  y: number\n  attach?: CardinalDirection\n  attachDistance?: number\n  size?: number\n  color?: string\n  svgTextProps?: React.SVGAttributes<SVGTextElement>\n}>\n\nexport function Text({\n  children,\n  x,\n  y,\n  color,\n  size = 30,\n  svgTextProps = {},\n  attach,\n  attachDistance = 0,\n}: TextProps) {\n  const { viewTransform: pixelMatrix, userTransform: transformContext } = useTransformContext()\n\n  let xOffset = 0\n  let textAnchor: React.SVGProps<SVGTextElement>[\"textAnchor\"] = \"middle\"\n  if (attach?.includes(\"w\")) {\n    textAnchor = \"end\"\n    xOffset = -1\n  } else if (attach?.includes(\"e\")) {\n    textAnchor = \"start\"\n    xOffset = 1\n  }\n\n  let yOffset = 0\n  let dominantBaseline: React.SVGProps<SVGTextElement>[\"dominantBaseline\"] = \"middle\"\n  if (attach?.includes(\"n\")) {\n    dominantBaseline = \"baseline\"\n    yOffset = 1\n  } else if (attach?.includes(\"s\")) {\n    dominantBaseline = \"hanging\"\n    yOffset = -1\n  }\n\n  let [pixelX, pixelY] = [0, 0]\n  if (xOffset !== 0 || yOffset !== 0) {\n    ;[pixelX, pixelY] = vec.withMag([xOffset, yOffset], attachDistance)\n  }\n\n  const center = vec.transform([x, y], vec.matrixMult(pixelMatrix, transformContext))\n\n  return (\n    <text\n      x={center[0] + pixelX}\n      y={center[1] + pixelY}\n      fontSize={size}\n      dominantBaseline={dominantBaseline}\n      textAnchor={textAnchor}\n      style={{\n        fill: color || \"var(--mafs-fg)\",\n        vectorEffect: \"non-scaling-stroke\",\n      }}\n      className=\"mafs-shadow\"\n      {...svgTextProps}\n    >\n      {children}\n    </text>\n  )\n}\n\nText.displayName = \"Text\"\n\nexport default Text\n", "import { useDrag } from \"@use-gesture/react\"\nimport * as React from \"react\"\nimport invariant from \"tiny-invariant\"\nimport { Theme } from \"../display/Theme\"\nimport { range } from \"../math\"\nimport { vec } from \"../vec\"\nimport { useTransformContext } from \"../context/TransformContext\"\nimport { useSpanContext } from \"../context/SpanContext\"\n\nexport type ConstraintFunction = (position: vec.Vector2) => vec.Vector2\n\nexport interface MovablePointProps {\n  /** The current position `[x, y]` of the point. */\n  point: vec.Vector2\n  /** A callback that is called as the user moves the point. */\n  onMove: (point: vec.Vector2) => void\n  /**\n   * Constrain the point to only horizontal movement, vertical movement, or mapped movement.\n   *\n   * In mapped movement mode, you must provide a function that maps the user's mouse position\n   * `[x, y]` to the position the point should \"snap\" to.\n   */\n  constrain?: ConstraintFunction\n  color?: string\n}\n\nexport function MovablePoint({\n  point,\n  onMove,\n  constrain = (point) => point,\n  color = Theme.pink,\n}: MovablePointProps) {\n  const { viewTransform, userTransform } = useTransformContext()\n  const { xSpan, ySpan } = useSpanContext()\n  const inverseViewTransform = vec.matrixInvert(viewTransform)\n  invariant(inverseViewTransform, \"The view transform must be invertible.\")\n\n  const inverseTransform = React.useMemo(() => getInverseTransform(userTransform), [userTransform])\n\n  const combinedTransform = React.useMemo(\n    () => vec.matrixMult(viewTransform, userTransform),\n    [viewTransform, userTransform]\n  )\n\n  const [dragging, setDragging] = React.useState(false)\n  const [displayX, displayY] = vec.transform(point, combinedTransform)\n\n  const pickup = React.useRef<vec.Vector2>([0, 0])\n\n  const ref = React.useRef<SVGGElement>(null)\n\n  useDrag(\n    (state) => {\n      const { type, event } = state\n      event?.stopPropagation()\n\n      const isKeyboard = type.includes(\"key\")\n      if (isKeyboard) {\n        event?.preventDefault()\n        const { direction: yDownDirection, altKey, metaKey, shiftKey } = state\n\n        const direction = [yDownDirection[0], -yDownDirection[1]] as vec.Vector2\n        const span = Math.abs(direction[0]) ? xSpan : ySpan\n\n        let divisions = 50\n        if (altKey || metaKey) divisions = 200\n        if (shiftKey) divisions = 10\n\n        const min = span / (divisions * 2)\n        const tests = range(span / divisions, span / 2, span / divisions)\n\n        for (const dx of tests) {\n          // Transform the test back into the point's coordinate system\n          const testMovement = vec.scale(direction, dx)\n          const testPoint = constrain(\n            vec.transform(\n              vec.add(vec.transform(point, userTransform), testMovement),\n              inverseTransform\n            )\n          )\n\n          if (vec.dist(testPoint, point) > min) {\n            onMove(testPoint)\n            break\n          }\n        }\n      } else {\n        const { last, movement: pixelMovement, first } = state\n\n        setDragging(!last)\n\n        if (first) pickup.current = vec.transform(point, userTransform)\n        if (vec.mag(pixelMovement) === 0) return\n\n        const movement = vec.transform(pixelMovement, inverseViewTransform)\n        onMove(constrain(vec.transform(vec.add(pickup.current, movement), inverseTransform)))\n      }\n    },\n    { target: ref, eventOptions: { passive: false } }\n  )\n\n  const ringSize = 15\n\n  return (\n    <g\n      ref={ref}\n      style={\n        {\n          \"--movable-point-color\": color,\n          \"--movable-point-ring-size\": `${ringSize}px`,\n        } as React.CSSProperties\n      }\n      className={`mafs-movable-point ${dragging ? \"mafs-movable-point-dragging\" : \"\"}`}\n      tabIndex={0}\n    >\n      <circle className=\"mafs-movable-point-hitbox\" r={30} cx={displayX} cy={displayY}></circle>\n      <circle\n        className=\"mafs-movable-point-focus\"\n        r={ringSize + 1}\n        cx={displayX}\n        cy={displayY}\n      ></circle>\n      <circle className=\"mafs-movable-point-ring\" r={ringSize} cx={displayX} cy={displayY}></circle>\n      <circle className=\"mafs-movable-point-point\" r={6} cx={displayX} cy={displayY}></circle>\n    </g>\n  )\n}\n\nMovablePoint.displayName = \"MovablePoint\"\n\nfunction getInverseTransform(transform: vec.Matrix) {\n  const invert = vec.matrixInvert(transform)\n  invariant(\n    invert !== null,\n    \"Could not invert transform matrix. Your movable point's transformation matrix might be degenerative (mapping 2D space to a line).\"\n  )\n  return invert\n}\n", "import * as React from \"react\"\nimport { Theme } from \"../display/Theme\"\nimport { vec } from \"../vec\"\nimport { MovablePoint } from \"./MovablePoint\"\n\nexport type ConstraintFunction = (position: vec.Vector2) => vec.Vector2\n\nexport interface UseMovablePointArguments {\n  color?: string\n\n  /**\n   * Constrain the point to only horizontal movement, vertical movement, or mapped movement.\n   *\n   * In mapped movement mode, you must provide a function that maps the user's attempted position\n   * (x, y) to the position the point should \"snap\" to.\n   */\n  constrain?: \"horizontal\" | \"vertical\" | ConstraintFunction\n}\n\nexport interface UseMovablePoint {\n  x: number\n  y: number\n  point: vec.Vector2\n  element: React.ReactElement\n  setPoint: (point: vec.Vector2) => void\n}\n\nexport function useMovablePoint(\n  initialPoint: vec.Vector2,\n  { constrain, color = Theme.pink }: UseMovablePointArguments = {}\n): UseMovablePoint {\n  const [initialX, initialY] = initialPoint\n  const [point, setPoint] = React.useState<vec.Vector2>(initialPoint)\n  const [x, y] = point\n\n  const constraintFunction: ConstraintFunction = React.useMemo(() => {\n    if (constrain === \"horizontal\") {\n      return ([x]) => [x, initialY]\n    } else if (constrain === \"vertical\") {\n      return ([, y]) => [initialX, y]\n    } else if (typeof constrain === \"function\") {\n      return constrain\n    }\n\n    return ([x, y]) => [x, y]\n  }, [constrain, initialX, initialY])\n\n  const element = React.useMemo(() => {\n    return <MovablePoint {...{ point, color }} constrain={constraintFunction} onMove={setPoint} />\n  }, [point, color, constraintFunction])\n\n  return {\n    x,\n    y,\n    point: [x, y],\n    element,\n    setPoint,\n  }\n}\n", "import * as React from \"react\"\n\nexport interface StopwatchArguments {\n  /** The start time in seconds */\n  startTime?: number\n  /** The end time in seconds */\n  endTime?: number\n}\n\nexport interface Stopwatch {\n  /**\n   * The amount of time that has passed since the timer started, in high-precision seconds.\n   */\n  time: number\n  /** Starts the timer (resumes the timer if paused) */\n  start: () => void\n  /** Stops and resets the timer. */\n  stop: () => void\n\n  /** Sets the current time to a certain value.\n   * @throws an error if the time is outside of the given range.\n   */\n  setTime: (time: number) => void\n}\n\nexport function useStopwatch(options?: StopwatchArguments): Stopwatch {\n  const { startTime = 0, endTime = Infinity } = options || {}\n\n  const startClockTime = React.useRef<DOMHighResTimeStamp | null>(null)\n  const [time, setTime] = React.useState(startTime)\n  const [playing, setPlaying] = React.useState(false)\n\n  React.useEffect(() => {\n    let request = -1\n\n    function tick(now: DOMHighResTimeStamp) {\n      now = now / 1000\n\n      if (!startClockTime.current) startClockTime.current = now\n      const deltaTime = now - startClockTime.current\n\n      if (deltaTime >= endTime) {\n        startClockTime.current = null\n        setTime(endTime)\n        setPlaying(false)\n        return\n      }\n\n      setTime(Math.min(deltaTime, endTime))\n      request = window.requestAnimationFrame(tick)\n    }\n\n    if (playing) {\n      request = window.requestAnimationFrame(tick)\n    } else {\n      window.cancelAnimationFrame(request)\n    }\n\n    return () => window.cancelAnimationFrame(request)\n  }, [playing, endTime])\n\n  const start = React.useCallback(() => setPlaying(true), [])\n  const stop = React.useCallback(() => {\n    startClockTime.current = null\n    setPlaying(false)\n    setTime(startTime)\n  }, [startTime])\n\n  return { time, setTime: (time) => setTime(time * 1000), start, stop }\n}\n", "import * as React from \"react\"\nimport { vec } from \"../vec\"\nimport { TransformContext, useTransformContext } from \"../context/TransformContext\"\n\nexport type TransformProps = React.PropsWithChildren<{\n  matrix?: vec.Matrix\n  translate?: vec.Vector2\n  scale?: number | vec.Vector2\n  rotate?: number\n  shear?: vec.Vector2\n}>\n\nexport function Transform(props: TransformProps) {\n  const { userTransform, viewTransform } = useTransformContext()\n\n  let builder = vec.matrixBuilder()\n\n  // Destructure props so that we can iterate over transforms in prop-order\n  const { matrix, children, ...transforms } = props\n\n  if (matrix) builder = builder.mult(matrix)\n\n  for (const [name, value] of Object.entries(transforms)) {\n    if (value == null) continue\n    switch (name) {\n      case \"translate\":\n        builder = builder.translate(...(value as vec.Vector2))\n        break\n      case \"scale\":\n        if (typeof value === \"number\") builder = builder.scale(value, value)\n        else builder = builder.scale(...(value as vec.Vector2))\n        break\n      case \"shear\":\n        builder = builder.shear(...(value as vec.Vector2))\n        break\n      case \"rotate\":\n        builder = builder.rotate(value as number)\n        break\n    }\n  }\n\n  builder = builder.mult(userTransform)\n\n  const newUserTransform = builder.get()\n\n  return (\n    <TransformContext.Provider value={{ userTransform: newUserTransform, viewTransform }}>\n      <g style={{ \"--mafs-user-transform\": vec.toCSS(newUserTransform) } as React.CSSProperties}>\n        {children}\n      </g>\n    </TransformContext.Provider>\n  )\n}\n\nTransform.displayName = \"Transform\"\n", "import { useCoordinateContext } from \"../context/CoordinateContext\"\nimport { usePaneContext } from \"../context/PaneContext\"\nimport { useTransformContext } from \"../context/TransformContext\"\nimport { vec } from \"..\"\n\ninterface PaneVisualizerProps {\n  /** The number of decimal places to which to round the displayed values. */\n  precision?: number\n}\n\nexport function ViewportInfo({ precision = 3 }: PaneVisualizerProps) {\n  const { xMin, xMax, yMin, yMax } = useCoordinateContext()\n  const { viewTransform } = useTransformContext()\n  const { xPanes, yPanes } = usePaneContext()\n\n  const [x, y] = vec.transform([xMin, yMin], viewTransform)\n\n  const xPanesString = xPanes.map((pane) => `(${pane.join(\", \")})`).join(\"   \")\n  const yPanesString = yPanes.map((pane) => `(${pane.join(\", \")})`).join(\"   \")\n\n  return (\n    <g className=\"mafs-shadow\" fontFamily=\"monospace\">\n      <text x={x + 10} y={y - 70}>\n        x: ({xMin.toFixed(precision)}, {xMax.toFixed(precision)})\n      </text>\n      <text x={x + 10} y={y - 50}>\n        y: ({yMin.toFixed(precision)}, {yMax.toFixed(precision)})\n      </text>\n      <text x={x + 10} y={y - 30}>\n        xPanes: {xPanesString}\n      </text>\n      <text x={x + 10} y={y - 10}>\n        yPanes: {yPanesString}\n      </text>\n    </g>\n  )\n}\n", "import * as React from \"react\"\n\nimport { vec } from \"../vec\"\nimport { Theme } from \"../display/Theme\"\nimport { useMovablePoint } from \"../interaction/useMovablePoint\"\nimport { Transform } from \"../display/Transform\"\nimport { Circle } from \"../display/Circle\"\nimport { Polygon } from \"../display/Polygon\"\n\nexport interface TransformWidgetProps {\n  /** The components to transform */\n  children: React.ReactNode\n}\n\nexport function TransformWidget({ children }: TransformWidgetProps) {\n  const t = useMovablePoint([0, 0])\n  const s = useMovablePoint([1, 1], { color: Theme.blue })\n  const r = useMovablePoint([1, 0], {\n    color: Theme.green,\n    constrain: (p) => vec.normalize(p),\n  })\n  const angle = Math.atan2(r.point[1], r.point[0])\n\n  return (\n    <>\n      <Transform translate={t.point}>\n        <Transform rotate={angle}>\n          <Transform scale={s.point}>\n            {children}\n\n            <Polygon\n              points={[\n                [0, 0],\n                [0, 1],\n                [1, 1],\n                [1, 0],\n              ]}\n              color={Theme.blue}\n            />\n          </Transform>\n\n          <Circle\n            center={[0, 0]}\n            radius={1}\n            strokeStyle=\"dashed\"\n            strokeOpacity={0.5}\n            fillOpacity={0}\n            color={Theme.green}\n          />\n\n          {s.element}\n        </Transform>\n\n        {r.element}\n      </Transform>\n\n      {t.element}\n    </>\n  )\n}\n", "import { ViewportInfo } from \"./ViewportInfo\"\nimport { TransformWidget } from \"./TransformWidget\"\n\nexport const Debug = {\n  ViewportInfo,\n  TransformWidget,\n}\n\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nDebug.ViewportInfo.displayName = \"Debug.ViewportInfo\"\n\n// @ts-expect-error - setting these here to avoid invalid .d.ts output\nDebug.TransformWidget.displayName = \"Debug.TransformWidget\"\n", "import * as React from \"react\"\nimport katex, { KatexOptions } from \"katex\"\nimport { vec } from \"../vec\"\nimport { useTransformContext } from \"../context/TransformContext\"\nimport { Theme } from \"./Theme\"\n\ninterface LatexProps {\n  tex: string\n  at: vec.Vector2\n  color?: string\n  katexOptions?: KatexOptions\n}\n\nexport function LaTeX({ at: center, tex, color = Theme.foreground, katexOptions }: LatexProps) {\n  const ref = React.useRef<HTMLSpanElement>(null)\n  const { viewTransform, userTransform } = useTransformContext()\n  const combinedTransform = vec.matrixMult(viewTransform, userTransform)\n\n  // TODO: there's probably a better way to do this but we want to leave plenty\n  // of room for the LaTeX to expand\n  const width = 99999\n  const height = 99999\n\n  React.useEffect(() => {\n    if (!ref.current) return\n    katex.render(tex, ref.current, katexOptions)\n  }, [katexOptions, tex])\n\n  const pixelCenter = vec.add(vec.transform(center, combinedTransform), [-width / 2, -height / 2])\n\n  return (\n    <foreignObject\n      x={pixelCenter[0]}\n      y={pixelCenter[1]}\n      width={width}\n      height={height}\n      pointerEvents=\"none\"\n    >\n      <div\n        style={{\n          fontSize: \"1.3em\",\n          width,\n          height,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          position: \"fixed\",\n          color,\n          textShadow: `, 0 0 2px ${Theme.background}`.repeat(8).slice(2),\n        }}\n      >\n        <span ref={ref} />\n      </div>\n    </foreignObject>\n  )\n}\n"],
  "mappings": "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",
  "names": ["React", "invariant", "React", "round", "xMin", "yMin", "vec", "m", "React", "import_tiny_invariant", "invariant", "React", "import_tiny_invariant", "invariant", "import_tiny_invariant", "React", "React", "React", "import_jsx_runtime", "useResizeObserver", "invariant", "ySpan", "xSpan", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "React", "React", "min", "max", "lower", "upper", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_tiny_invariant", "import_jsx_runtime", "range", "invariant", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "React", "import_jsx_runtime", "incrementer", "import_jsx_runtime", "import_react", "React", "import_tiny_invariant", "import_jsx_runtime", "point", "invariant", "React", "import_jsx_runtime", "x", "y", "React", "time", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "React", "import_jsx_runtime", "katex"]
}
